#!/usr/bin/env node
/*
 * Copyright (c) 2012 Kaerus, Anders Elo <anders @ kaerus com>.
 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 */

var arango = require('arango.client')
  , crypto = require('crypto')
  , util = require('util')
  , mime = require('mime')
  , path = require('path')
  , fs = require('node-fs')
  , deploy = {
      store: {command: process_store, brief: "deploy files as key-values"},
      module: {command: process_module, brief: "deploy files as modules"},
      dummy: {command: process_dummy, brief: "dummy process"}
    }, program
  , PSEP = process.platform === 'win32' ? '\\' : '/';  


function show_help() {
  console.log("Arango deployment tools v0.3.2 by Anders Elo <anders @ kaerus com>.");
  console.log("Commands:");
  Object.keys(deploy).forEach(function(command){
    console.log("%s:",command.pad(-16),deploy[command].brief)
  });
  console.log("type: 'arangodep <command> --help' for more information.");
  process.exit(0);
}  

/* returns a fixed width padded string */
String.prototype.pad = function(justify,chr) {
  var str, args, width = Math.abs(justify), chr = chr || ' ', a, b;
  
  args = this.split('');
  args.unshift(this.length);
  if(justify >= 0) args.unshift(0);
  else args.unshift(width-this.length); 

  str = new Array(width);
  /* apply padding from a to b */
  a = justify < 0 ? 0 : this.length;
  b = justify < 0 ? width-this.length : width;
  for(var i = a; i < b; i++) str[i] = chr; 
  
  Array.prototype.splice.apply(str,args);

  return str.join('');
}

process.argv.shift(); 
program = path.basename(process.argv.shift()); 

if(process.argv.length < 2) show_help();

//try {
  deploy[process.argv[0]].command.call(null,process.argv);
//} catch(e) {
//  console.log("Error(%s):", e.code, e.message);
//  process.exit(e.code);
//}  

function isBinary(file) {
  switch(path.extname(file)){
    case '.html':
    case '.htm':
    case '.js':
    case '.json':
    case '.css':
    case '.txt':
    case '.md':
      return false;
  }
  return true;
}

/* traverses directory structure         */
/* and returns filepaths to handler      */
/* basepath is without initial directory */
/* todo: how to handle symlinks?         */
function traverseFiles(dir,callback,subdir){
  var files = fs.readdirSync(dir), 
      extname, realpath, basepath;    
  files.forEach(function(file){
    try {
      realpath = subdir ? dir+PSEP+file : dir+file;
      basepath = subdir ? subdir+PSEP+file : file;
      stat = fs.statSync(realpath);
      /* traverse subdirs */
      if(stat.isDirectory()) {
        traverseFiles(realpath,callback,basepath);
      } else if(stat.isFile()) {
        callback(realpath,basepath);
      }  
    } catch(err) { throw err }    
  });    
}

/* reads connection url and returns connection */
/* adds basedir to connection object */
function arangoConnection(conn_url) {
  var x, connection = new arango.Connection(conn_url);
  /* strip out collection name */
  x = connection.config.name.split(':');
  if(x && x.length > 1) {
    connection.config.name = x[0];
    /* keep basedir & trim slashes */
    connection.basedir = x[1].replace(/^\//,'').replace(/\/$/,'');
  } 
  return connection;
}

/* processes files, determines source and destination */
/* callback gets source + dest filepath,              */ 
/* remote connection and toLocal flag                 */ 
/* todo: needs some refactoring */
function processFiles(files,callback) {
  var toLocal;

  /* TODO: ability to read from stdin and write to stdout */
  if(files.length < 2)
    throw {message: "source and destination required", code: -1};

  /* get sources & destination */
  sources = files.splice(0,files.length-1);
  destination = files[0];

  /* determine if destination is local or remote */
  if(destination.match(/^(?:([A-Za-z]+):)/)) toLocal = false;
  else toLocal = true;
 
  sources.forEach(function(source){ 
    if(toLocal) { 
      /* destination is local */
      try {
        var remote = arangoConnection(source); 
      } catch (err) {
        throw {message:'source invalid or unavailable', code:-3 }
      }     
      callback(source,destination,remote,toLocal);
    } else {   
      /* destination is remote */
      var remote = arangoConnection(destination); 
      try { 
          stat = fs.statSync(source); 
        } catch(err){ throw {message:"source invalid " + err.message,code:err.code} }   
      if(stat.isDirectory()){
          /* upload entire directory & subdirs */
          traverseFiles(source,function(sourcefile,destfile){
            callback(sourcefile,destfile,remote,toLocal);
          });
      } else {
        /* destfile = sourcefile */
        destination = path.basename(source);
        callback(source,destination,remote,toLocal);
      } 
    } 
  });
}


/* dummy deploy process for testing purposes */
function process_dummy(argv) {
  var command = argv.shift()
    , options = {}
    , files = [];

  function help() {
    console.log("Deploy dummy");
    console.log("Command:", program + ' ' + command + " <options> <sources> <destination>");
    console.log("Options:");
    console.log("-h --help".pad(16),"Shows this help" );
    process.exit(0);
  }

  for(i = 0; i < argv.length; i++) {
    switch(argv[i]) {
      case '-h':
      case '--help':
        help();
        break;
      default:
        files.push(argv[i]);
        break;
    }
  }

  processFiles(files,function(source,destination,remote,toLocal){
    
    if(toLocal) {
      console.log("Download %s to %s", source, destination);
    } else {
      console.log("Deploy %s to %s", source, destination);

    }
  });
  
} /* end of process_anything */

/* Handles deployment to/from the arangodb key-value store */
function process_store(argv) {
  var command = argv.shift()
    , options = {}
    , files = [];
    

  function help() {
    console.log("Key-value store deployment");
    console.log("Command:", program + ' ' + command + " <options> <sources> <destination>");
    console.log("Options:");
    console.log("-h --help".pad(16),"Shows this help" );
    console.log("-e --expiry".pad(16),"Set Expiry date 'yyyy-mm-dd HH:MM:SS'");
    process.exit(0);
  }

  for(i = 0; i < argv.length; i++) {
    switch(argv[i]) {
      case '-h':
      case '--help':
        help();
        break;
      case '-e':
      case '--expiry':
        options.expiry = new Date(Date.parse(argv[++i],"yyyy-MM-dd HH:MM:SS")); 
        console.log("Epiry date: ", options.expiry.toString()); 
        break;  
      default:
        files.push(argv[i]);
        break;
    }
  }


  processFiles(files,function(source,dest,remote,toLocal){
    var data, destdir, destfile;
    if(toLocal) {
      try { 
          stat = fs.statSync(dest);
          if(!stat.isDirectory())
            throw {message:"destination must be a directory", code:-2} 
        }
        catch(e){
          try { fs.mkdirSync(dest,0777,true);
            console.log("Created directory", dest); 
          } catch(err) { throw err }  
      }   
      /* get list of files from remote */
      remote.key.list(remote.basedir,function(err,ret){
        if(err) throw {message:ret,code:err}
        ret.forEach(function(sourcefile){
          /* destfile is same as sourcefile without remote basedir */
          destfile = dest+sourcefile.replace(remote.basedir,'');
          try{ 
            fs.statSync(destfile); 
          } catch(e) {
            try {
              destdir = path.dirname(destfile);
              fs.statSync(destdir);
            } catch(err){ 
              fs.mkdirSync(destdir,0777, true);
              console.log("Created directory", destdir);
            }
          }
          read_remote_write_local(sourcefile,destfile,remote);
        });
      });
    } else {
      /* add remote basedir to destfile */
      if(remote.basedir)
        destfile = remote.basedir + '/' + dest;
      else destfile = dest;

      if(!(typeof options.expiry === 'object'))
          throw {message:"expiry date missing", code:-3}
  
      read_local_write_remote(source,destfile,remote,options.expiry);  
    }  

  });    

  function read_remote_write_local(source,dest,remote){
    remote.key.get(source).on('result',function(ret,hdr){
      console.log("Downloaded %s (%s bytes)", dest, ret ? ret.length : 0);
      try {
        if(isBinary(source)){
          fs.writeFileSync(dest,new Buffer(ret,'base64').toString('binary'),'binary');
        } else {
          fs.writeFileSync(dest,ret,'utf-8');
        } 
      } catch(err) { throw err }
    });  
  }

  function read_local_write_remote(source,dest,remote,expiry) {
    try {
      data = fs.readFileSync(source);
    } catch(err) { throw err } 

    remote.key.put(dest, { 
          expires:expiry,
          extended:{contentType: mime.lookup(source)}
          }, isBinary(source) ? data.toString('base64') : data.toString(), function(err,ret) {
              if(err) throw {message:ret,code:err};
              else console.log("Deployed %s (%s bytes)", dest, data.length);  
    }); 
  }
} /* end of process_store */



/* handles deployment of arangodb modules */
function process_module(argv) {
  var command = argv.shift()
    , options = {}
    , files = [];

  function help() {
    console.log("Module deployment");
    console.log("Command:", program + ' ' + command + " <options> <sources> <destination>");
    console.log("Options:");
    console.log("-h --help".pad(16),"Shows this help" );
    process.exit(0);
  }

  for(i = 0; i < argv.length; i++) {
    switch(argv[i]) {
      case '-h':
      case '--help':
        help();
        break;
      default:
        files.push(argv[i]);
        break;
    }
  }


  processFiles(files,function(source,dest,remote,toLocal){
    var destfile;

    if(toLocal) {
      try { 
          stat = fs.statSync(dest);
          if(!stat.isDirectory())
            throw {message:"destination must be a directory", code:-2} 
        }
        catch(e){
          try { fs.mkdirSync(dest,0777,true);
            console.log("Created directory", dest); 
          } catch(err) { throw err }  
      }   
      /* get list of files from remote */
      remote.simple.list("_modules",{path:remote.basedir},function(err,ret){
        if(err) throw{message:"Modules not found: " + ret, code:err}
        if(ret.result) {
          ret.result.forEach(function(module){
            remote_module_write_local(module,dest,remote);
          });
        } else console.log("No modules at ", remote.basedir);
      });
    } else {
      /* add remote basedir to destfile */
      if(remote.basedir)
        destfile = remote.basedir + '/' + dest;
      else destfile = dest;

      read_local_write_remote(source,destfile,remote);
    }
  });

  function remote_module_write_local(module,dest,remote){
    var destdir;

    destfile = dest+module.path.replace(remote.basedir,'');
    try{ 
      fs.statSync(destfile); 
    } catch(e) {
      try {
        destdir = path.dirname(destfile);
        fs.statSync(destdir);
      } catch(err){ 
        fs.mkdirSync(destdir,0777, true);
        console.log("Created directory", destdir);
      }
    }

    try{
      fs.writeFileSync(destfile,module.content,'utf-8');
      console.log("Downloaded %s (%s bytes)", destfile, module.content.length);
    } catch(err){ 
        throw {message:"Failed to create file: "+ err.message, code:err.code}
    }    
  }

  function read_local_write_remote(source,dest,remote){
    if(isBinary(source)) 
      throw{message:"Binary modules are not permitted",code:-5}

    try {
      data = fs.readFileSync(source).toString();
    } catch(err) { throw err }

    /* check if module exists */
    remote.simple.first("_modules",{path:dest},function(err,ret){
      if(err){
        /* no module found */
        remote.document.create("_modules",{path:dest,content:data},function(err,ret){
          if(err) throw{message:"Failed to deploy module: "+ret,code:err};
          else console.log("Deployed module %s to %s", source, dest); 
        });
      } else {
        /* update existing */
        remote.document.put(ret.document._id,{path:dest,content:data},function(err,ret){
          if(err) throw{message:"Failed to update module: "+ret,code:err}
          else console.log("Updated module %s to %s", source, dest);  
        });
      } 
    });
    
  }
  
} /* end of process_module */